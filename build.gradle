group = 'ru.mail.go'
apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 8

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

dependencies {
    compile 'org.apache.spark:spark-core_2.11:1.6.3'
    compile 'org.apache.spark:spark-sql_2.11:1.6.3'
    compile 'org.apache.orc:orc-core:1.4.0'
    compile 'org.apache.orc:orc-mapreduce:1.4.0'
}

// Creates scripts for entry points
// Subproject must apply application plugin to be able to call this method.
def createScript(project, mainClass, name) {
    project.tasks.create(name: name, type: CreateStartScripts) {
        outputDir       = new File(project.buildDir, 'scripts')
        mainClassName   = mainClass
        applicationName = name
        classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
    }
    project.tasks[name].dependsOn(project.jar)

    project.applicationDistribution.with {
        into("bin") {
            from(project.tasks[name])
            fileMode = 0755
        }
    }
}

// The next two lines disable the tasks for the primary main which by default
// generates a script with a name matching the project name.
// You can leave them enabled but if so you'll need to define mainClassName
// And you'll be creating your application scripts two different ways which
// could lead to confusion
startScripts.enabled = false
run.enabled = false

// Call this for each Main class you want to expose with an app script
createScript(project, 'SampleFileWriter', 'write_sample.sh')